@using WebApp.Models.Auth
@model RegisterViewModel
@{
  Layout = "_AuthLayout";
}

<section class="auth-card" aria-label="Register">
  <div class="brand">PhotoLite</div>
  <form class="auth-form" asp-action="Register" asp-controller="Auth" method="post">
    <div class="form-row">
      <label asp-for="UserName" class="form-label"></label>
      <input asp-for="UserName" class="form-input" type="text" placeholder="Your username" />
      <span class="error-message" id="register-username-error"></span>
    </div>
    <div class="form-row">
      <label asp-for="Email" class="form-label"></label>
      <input asp-for="Email" class="form-input" type="email" placeholder="you@example.com" />
      <span class="error-message" id="register-email-error"></span>
    </div>
    <div class="form-row">
      <label asp-for="Password" class="form-label"></label>
      <input asp-for="Password" class="form-input" type="password" placeholder="••••••••" />
      <span class="error-message" id="register-password-error"></span>
    </div>
    <div class="form-row">
      <label asp-for="PasswordConfirmation" class="form-label"></label>
      <input asp-for="PasswordConfirmation" class="form-input" type="password" placeholder="Re-enter your password" />
      <span class="error-message" id="register-password-confirm-error"></span>
    </div>
    <div class="form-actions">
      <button type="submit" class="btn" style="width:100%">Create account</button>
    </div>
  </form>
  <div class="alt">Already have an account? <a href="login.html">Log in</a></div>
</section>

@section Scripts {
  <script>
    @if (ViewData["ErrorMessage"] is not null)
    {
        <text>
          toastr.error("@ViewData["ErrorMessage"]", "");
        </text>
    }
  </script>

  <script>
      (function () {
        const form = document.querySelector('.auth-form');
        if (!form) return;

        const username = document.getElementById('UserName');
        const email = document.getElementById('Email');
        const password = document.getElementById('Password');
        const confirmPassword = document.getElementById('PasswordConfirmation');

        const usernameError = document.getElementById('register-username-error');
        const emailError = document.getElementById('register-email-error');
        const passwordError = document.getElementById('register-password-error');
        const confirmPasswordError = document.getElementById('register-password-confirm-error');

        function showError(inputElement, errorElement, message) {
          if (errorElement && message) {
            errorElement.textContent = message;
            if (inputElement) {
              inputElement.classList.add('error');
            }
            return false;
          }
          return true;
        }

        function hideError(inputElement, errorElement) {
          if (errorElement) {
            errorElement.textContent = '';
          }
          if (inputElement) {
            inputElement.classList.remove('error');
          }
        }

        function validateUsername() {
          const value = username.value.trim();
          hideError(username, usernameError);

          if (!value) {
            return showError(username, usernameError, 'Username is required');
          }
          if (value.length < 3) {
            return showError(username, usernameError, 'Username must be at least 3 characters');
          }
          if (value.length > 50) {
            return showError(username, usernameError, 'Username must not exceed 50 characters');
          }
          if (!/^[a-zA-Z0-9_-]+$/.test(value)) {
            return showError(username, usernameError, 'Username can only contain letters, numbers, underscores and hyphens');
          }
          return true;
        }

        function validateEmail() {
          const value = email.value.trim();
          hideError(email, emailError);

          if (!value) {
            return showError(email, emailError, 'Email is required');
          }
          if (value.length > 255) {
            return showError(email, emailError, 'Email must not exceed 255 characters');
          }
          const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
          if (!emailRegex.test(value)) {
            return showError(email, emailError, 'Email must be a valid email address');
          }
          return true;
        }

        function validatePassword() {
          const value = password.value;
          hideError(password, passwordError);

          if (!value) {
            return showError(password, passwordError, 'Password is required');
          }
          if (value.length < 8) {
            return showError(password, passwordError, 'Password must be at least 8 characters');
          }
          if (value.length > 100) {
            return showError(password, passwordError, 'Password must not exceed 100 characters');
          }
          if (!/[A-Z]/.test(value)) {
            return showError(password, passwordError, 'Password must contain at least one uppercase letter');
          }
          if (!/[a-z]/.test(value)) {
            return showError(password, passwordError, 'Password must contain at least one lowercase letter');
          }
          if (!/[0-9]/.test(value)) {
            return showError(password, passwordError, 'Password must contain at least one number');
          }
          if (!/[^a-zA-Z0-9]/.test(value)) {
            return showError(password, passwordError, 'Password must contain at least one special character');
          }
          return true;
        }

        function validateConfirmPassword() {
          const value = confirmPassword.value;
          hideError(confirmPassword, confirmPasswordError);

          if (!value) {
            return showError(confirmPassword, confirmPasswordError, 'Password confirmation is required');
          }
          if (password.value !== value) {
            return showError(confirmPassword, confirmPasswordError, 'Passwords do not match');
          }
          return true;
        }

        // Real-time validation on input
        username.addEventListener('input', validateUsername);
        username.addEventListener('blur', validateUsername);
        email.addEventListener('input', validateEmail);
        email.addEventListener('blur', validateEmail);
        password.addEventListener('input', () => {
          validatePassword();
          if (confirmPassword.value) {
            validateConfirmPassword();
          }
        });
        password.addEventListener('blur', validatePassword);
        confirmPassword.addEventListener('input', validateConfirmPassword);
        confirmPassword.addEventListener('blur', validateConfirmPassword);

        form.addEventListener('submit', (event) => {
          event.preventDefault();

          const usernameValid = validateUsername();
          const emailValid = validateEmail();
          const passwordValid = validatePassword();
          const confirmPasswordValid = validateConfirmPassword();

          if (usernameValid && emailValid && passwordValid && confirmPasswordValid) {
            event.target.submit();
          } else {
            // Focus first invalid field
            if (!usernameValid) username.focus();
            else if (!emailValid) email.focus();
            else if (!passwordValid) password.focus();
            else if (!confirmPasswordValid) confirmPassword.focus();
          }
        });
      })();
  </script>
}